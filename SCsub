#!/usr/bin/env python
#SCsub


import os
import subprocess
from tools import helpers


Import('env')
mysql_env = env.Clone()


# Enable Boost separate compilation mode
#mysql_env.Append(CPPDEFINES=["BOOST_MYSQL_SEPARATE_COMPILATION"])


# Build with exceptions!
"""
if env["disable_exceptions"]:
	if env.msvc and ("_HAS_EXCEPTIONS", 0) in mysql_env["CPPDEFINES"]:
		mysql_env["CPPDEFINES"].remove(("_HAS_EXCEPTIONS", 0))
		mysql_env.AppendUnique(CPPFLAGS=["/EHsc"])
	elif not env.msvc and "-fno-exceptions" in mysql_env["CPPFLAGS"]:
		mysql_env["CPPFLAGS"].remove("-fno-exceptions")
"""


# Use absolut paths to avoid problem between platforms.
dep_path = os.path.join(os.getcwd(), "3party")


# INCLUDE:
mysql_env.Prepend(CPPPATH=[
	os.path.join(dep_path, "boost"),
	os.path.join(dep_path, "boost/boost"),
	os.path.join(dep_path, "openssl"),
	os.path.join(dep_path, "openssl/include"),
])


# LIB
env.Append(LIBPATH=[
	os.path.join(dep_path, "boost/stage/lib"),
	os.path.join(dep_path, "boost/boost"),
	os.path.join(dep_path, "openssl"),
	os.path.join(dep_path, "openssl/apps"),
	os.path.join(dep_path, "openssl/providers"),
])


# Update and compile thirdparty.
helpers.apply_config(mysql_env)


sources = [
	"register_types.cpp",
	"scr/helpers.cpp",
	"scr/sql_result.cpp",
	"scr/mysql.cpp",
]

mysql_env.Append(CPPFLAGS=[
	'-fexceptions',
	'-std=c++20',
])


env.Prepend(LIBS=["libboost_thread", "libcrypto", "libssl"])

mysql_env.add_source_files(env.modules_sources, sources)

