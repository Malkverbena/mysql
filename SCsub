#!/usr/bin/env python
#SCsub

# ===============================MODULE OPTIONS===============================
# DO NOT FORGET TO REPLACE THE SLASH FOR BACKSLASH ON PATHS => "\" FOR "/" 

# Enter with path to Boost library here
boost_path = "C:/boost_1_76_0"

# Enter with the path to jdbc here (mysql_connection.h & mysql_driver.h)
include_path = "C:/mysql/mysql-connector-c++-8.0.29-winx64/include/jdbc"

# Enter with the path to mysql libs here (mysqlcppconn.lib)
lib_path = 'C:/mysql/mysql-connector-c++-8.0.29-winx64/lib64/vs14/debug'


# Enable the module debug.
module_debug = True

# Compile the module with connector trace mode ON.
# https://dev.mysql.com/doc/connector-cpp/1.1/en/connector-cpp-debug-tracing.html
connector_trace = True

# ============================================================================

import os
import sys
import shutil
import version
Import("env")


env.add_source_files(env.modules_sources,"*.cpp")
mysql_env = env.Clone()
mysql_env['LIBS'] = []
host_platform = ""


#--------------


if module_debug:
    env.Append(CPPDEFINES=["MYSQL_DEBUG"])

if version.major == 4:
	env.Append(CPPDEFINES=["GODOT4"])

if connector_trace:
    mysql_env.Append(CPPDEFINES=["-DMYSQLCPPCONN_TRACE_ENABLE=1"])

if (sys.platform.startswith("linux") or sys.platform.startswith("dragonfly") or sys.platform.startswith("freebsd") or sys.platform.startswith("netbsd") or sys.platform.startswith("openbsd")):
	host_platform = "linuxbsd"
elif sys.platform == "darwin":
	host_platform = "osx"
elif sys.platform == "win32":
	host_platform = "windows"
else:
	print("Could not detect the host platform automatically.")


#--------------



if env["platform"] in ["windows", "UWP"]:
	if connector_trace:
		mysql_env.Append(CXXFLAGS=['-DMYSQLCPPCONN_TRACE_ENABLE:BOOL=1'])

	target_lib = ""
	target_lib_arr = []
	
	env.Append(CPPPATH=[include_path, boost_path])
	env.Append(LIBPATH=[lib_path])

	sufix = env["PROGSUFFIX"]
	target_lib="mysqlcppconn"
	sufix = sufix[0:-3]

	mysql_env.Append(CPPFLAGS =["-I" + include_path, "-L " + lib_path])
	target_lib_arr = [target_lib]   # TODO: More libs are expected for static compilling (ssl, crypto e etc...)

	# copy libs
	for i in target_lib_arr:
		source = lib_path + "/" + i + ".lib"
		destination = lib_path + "/" + i + sufix + "lib"
		shutil.copy2(source, destination)

	env.Append(LIBS=target_lib_arr)



elif env["platform"] in ["x11", "linux", "bsd", "linuxbsd"]:
	env.Append(LIBPATH=['/usr/lib'])
	env.Append(LIBS=['mysqlcppconn'])



elif env["platform"] in ["javascript", "web"]:
	env.Append(CPPPATH=['/usr/lib', '/usr/include'])
	env.Append(LIBPATH=['/usr/include', '/usr/include/x86_64-linux-gnu/bits', '/usr/include/x86_64-linux-gnu'])
	env.Append(LIBS=['mysqlcppconn'])


elif env["platform"] in ["osx"]:
	env.Append(LIBPATH=['/usr/lib'])
	env.Append(LIBS=['mysqlcppconn'])



