/* sql_conn.h */

#ifndef 	SQL_CONN_H
#define SQL_CONN_H


#include "sql_result.h"



class Conn{
friend class MySQL;
//friend class ConnTcp;
//friend class ConnTcpSsl;
private:
	// TCP Connection
	io_context ctx;										// boost::asio context
	ip::tcp::resolver::results_type eps;			// Physical endpoint(s) to connect to
	boost::mysql::handshake_params conn_params;	// MySQL credentials and other connection config
	ip::tcp::resolver resolver;						// To perform hostname resolution
	ssl::context ssl_ctx;								// MySQL 8+ default settings require SSL
	char *username;
	char *password;
	char *database;

public:
	Conn()
	:	conn_params((const char *)&username, (const char *)&password, (const char *)&database),
		resolver(ctx.get_executor()),
		ssl_ctx(boost::asio::ssl::context::tls_client)
	{
	}
	~Conn(){}
};





template <class C>
class conn{};


/* ===== TCP  TYPE: tcp_connection ===== */
template <class C>
class ConnTcp : public Conn {
friend class MySQL;
private:
	tcp_connection conn;	// Represents the connection to the MySQL server
public:
	ConnTcp() : conn(ctx.get_executor(), ssl_ctx){}
	~ConnTcp(){}
};



/* ===== TCP_SSL  TYPE: tcp_ssl_connection ===== */
template <class C>
class ConnTcpSsl : public Conn {
friend class MySQL;
private:
	tcp_ssl_connection conn;	// Represents the connection to the MySQL server
public:
	ConnTcpSsl() : conn(ctx.get_executor(), ssl_ctx){}
	~ConnTcpSsl(){}
};





/* ===== UNIX  TYPE: unix_connection ===== */
/* ===== UNIX_SSL  TYPE: unix_ssl_connection ===== */










#endif  // SQL_CONN_H
